$date
	Fri Jul  4 00:40:26 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module adder_test $end
$var wire 1 ! zero $end
$var wire 1 " sign $end
$var wire 1 # overflow $end
$var wire 16 $ out [15:0] $end
$var wire 1 % carry $end
$var reg 16 & A [15:0] $end
$var reg 16 ' B [15:0] $end
$scope module DUT $end
$var wire 16 ( in1 [15:0] $end
$var wire 16 ) in2 [15:0] $end
$var wire 1 # overflow $end
$var wire 1 ! zero $end
$var wire 1 " sign $end
$var wire 16 * out [15:0] $end
$var wire 1 % carry $end
$var wire 3 + c [2:0] $end
$scope module inst1 $end
$var wire 1 , cin $end
$var wire 4 - in1 [3:0] $end
$var wire 4 . in2 [3:0] $end
$var wire 4 / out [3:0] $end
$var wire 1 0 cout $end
$var wire 3 1 c [2:0] $end
$scope module inst1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 , cin $end
$var wire 1 4 cout $end
$var wire 1 5 sum $end
$var wire 3 6 t [2:0] $end
$upscope $end
$scope module inst2 $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 9 cin $end
$var wire 1 : cout $end
$var wire 1 ; sum $end
$var wire 3 < t [2:0] $end
$upscope $end
$scope module inst3 $end
$var wire 1 = a $end
$var wire 1 > b $end
$var wire 1 ? cin $end
$var wire 1 @ cout $end
$var wire 1 A sum $end
$var wire 3 B t [2:0] $end
$upscope $end
$scope module inst4 $end
$var wire 1 C a $end
$var wire 1 D b $end
$var wire 1 E cin $end
$var wire 1 0 cout $end
$var wire 1 F sum $end
$var wire 3 G t [2:0] $end
$upscope $end
$upscope $end
$scope module inst2 $end
$var wire 1 H cin $end
$var wire 4 I in1 [3:0] $end
$var wire 4 J in2 [3:0] $end
$var wire 4 K out [3:0] $end
$var wire 1 L cout $end
$var wire 3 M c [2:0] $end
$scope module inst1 $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 H cin $end
$var wire 1 P cout $end
$var wire 1 Q sum $end
$var wire 3 R t [2:0] $end
$upscope $end
$scope module inst2 $end
$var wire 1 S a $end
$var wire 1 T b $end
$var wire 1 U cin $end
$var wire 1 V cout $end
$var wire 1 W sum $end
$var wire 3 X t [2:0] $end
$upscope $end
$scope module inst3 $end
$var wire 1 Y a $end
$var wire 1 Z b $end
$var wire 1 [ cin $end
$var wire 1 \ cout $end
$var wire 1 ] sum $end
$var wire 3 ^ t [2:0] $end
$upscope $end
$scope module inst4 $end
$var wire 1 _ a $end
$var wire 1 ` b $end
$var wire 1 a cin $end
$var wire 1 L cout $end
$var wire 1 b sum $end
$var wire 3 c t [2:0] $end
$upscope $end
$upscope $end
$scope module inst3 $end
$var wire 1 d cin $end
$var wire 4 e in1 [3:0] $end
$var wire 4 f in2 [3:0] $end
$var wire 4 g out [3:0] $end
$var wire 1 h cout $end
$var wire 3 i c [2:0] $end
$scope module inst1 $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 d cin $end
$var wire 1 l cout $end
$var wire 1 m sum $end
$var wire 3 n t [2:0] $end
$upscope $end
$scope module inst2 $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 q cin $end
$var wire 1 r cout $end
$var wire 1 s sum $end
$var wire 3 t t [2:0] $end
$upscope $end
$scope module inst3 $end
$var wire 1 u a $end
$var wire 1 v b $end
$var wire 1 w cin $end
$var wire 1 x cout $end
$var wire 1 y sum $end
$var wire 3 z t [2:0] $end
$upscope $end
$scope module inst4 $end
$var wire 1 { a $end
$var wire 1 | b $end
$var wire 1 } cin $end
$var wire 1 h cout $end
$var wire 1 ~ sum $end
$var wire 3 !" t [2:0] $end
$upscope $end
$upscope $end
$scope module inst4 $end
$var wire 1 "" cin $end
$var wire 4 #" in1 [3:0] $end
$var wire 4 $" in2 [3:0] $end
$var wire 4 %" out [3:0] $end
$var wire 1 % cout $end
$var wire 3 &" c [2:0] $end
$scope module inst1 $end
$var wire 1 '" a $end
$var wire 1 (" b $end
$var wire 1 "" cin $end
$var wire 1 )" cout $end
$var wire 1 *" sum $end
$var wire 3 +" t [2:0] $end
$upscope $end
$scope module inst2 $end
$var wire 1 ," a $end
$var wire 1 -" b $end
$var wire 1 ." cin $end
$var wire 1 /" cout $end
$var wire 1 0" sum $end
$var wire 3 1" t [2:0] $end
$upscope $end
$scope module inst3 $end
$var wire 1 2" a $end
$var wire 1 3" b $end
$var wire 1 4" cin $end
$var wire 1 5" cout $end
$var wire 1 6" sum $end
$var wire 3 7" t [2:0] $end
$upscope $end
$scope module inst4 $end
$var wire 1 8" a $end
$var wire 1 9" b $end
$var wire 1 :" cin $end
$var wire 1 % cout $end
$var wire 1 ;" sum $end
$var wire 3 <" t [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx <"
x;"
x:"
x9"
x8"
bx 7"
x6"
x5"
x4"
x3"
x2"
bx 1"
x0"
x/"
x."
x-"
x,"
bx +"
x*"
x)"
x("
x'"
bx &"
bx %"
bx $"
bx #"
x""
bx !"
x~
x}
x|
x{
bx z
xy
xx
xw
xv
xu
bx t
xs
xr
xq
xp
xo
bx n
xm
xl
xk
xj
bx i
xh
bx g
bx f
bx e
xd
bx c
xb
xa
x`
x_
bx ^
x]
x\
x[
xZ
xY
bx X
xW
xV
xU
xT
xS
bx R
xQ
xP
xO
xN
bx M
xL
bx K
bx J
bx I
xH
bx G
xF
xE
xD
xC
bx B
xA
x@
x?
x>
x=
bx <
x;
x:
x9
x8
x7
b0x 6
x5
x4
x3
x2
bx 1
x0
bx /
bx .
bx -
0,
bx +
bx *
bx )
bx (
bx '
bx &
x%
bx $
x#
x"
x!
$end
#5
0*"
0""
0h
1~
0}
0x
1y
0w
0r
1s
0q
b0 i
0l
b1111 g
1m
0d
0L
1b
0a
0\
1]
0[
0V
1W
0U
b0 M
0P
b1111 K
1Q
0H
b0 +
00
1F
0E
0@
1A
1#
0?
0:
0"
1;
00"
06"
b0 %"
0;"
09
0."
04"
0:"
b0 1
04
0)"
0/"
b0 &"
05"
1%
0!
b111111111111 $
b111111111111 *
b1111 /
15
b0 6
b0 <
b0 B
b0 G
b0 R
b0 X
b0 ^
b0 c
b0 n
b0 t
b0 z
b0 !"
b0 +"
b0 1"
b0 7"
b1 <"
03
08
0>
0D
0O
0T
0Z
0`
0k
0p
0v
0|
0("
0-"
03"
19"
12
17
1=
1C
1N
1S
1Y
1_
1j
1o
1u
1{
0'"
0,"
02"
18"
b0 .
b0 J
b0 f
b1000 $"
b1111 -
b1111 I
b1111 e
b1000 #"
b1000000000000000 '
b1000000000000000 )
b1000111111111111 &
b1000111111111111 (
#10
1!
1:"
15"
b10 7"
14"
1/"
b10 1"
1."
b111 &"
1)"
b10 +"
1""
1h
0~
b10 !"
1}
1x
0y
b10 z
1w
1r
0s
b10 t
1q
b111 i
1l
b0 g
0m
b10 n
1d
1L
0b
b10 c
1a
1\
0]
b10 ^
1[
1V
0W
b10 X
1U
b111 M
1P
b0 K
0Q
b10 R
1H
b111 +
10
0F
b10 G
1E
1@
0A
b10 B
1?
b110 1
1:
1%
0"
0#
0;
b1 <
0;"
b10 <"
b0 /
05
0*"
00"
b0 $
b0 *
b0 %"
06"
18
09"
02
1'"
1,"
12"
b10 .
b0 $"
b1110 -
b1111 #"
b10 '
b10 )
b1111111111111110 &
b1111111111111110 (
#15
0%
1"
1;"
b0 <"
0:"
05"
16"
04"
0/"
10"
b0 1"
0."
b0 &"
0)"
b1111 %"
1*"
0""
0h
1~
b0 !"
0}
0x
1y
0w
0r
1s
b0 t
0q
b0 i
0l
b1111 g
1m
0d
0L
1b
b0 c
0a
0\
1]
0[
0V
1W
b0 X
0U
b0 M
0P
b1111 K
1Q
0H
b0 +
00
1F
b0 G
0E
0@
1A
0?
b0 1
0:
15
0!
b1111111111111111 $
b1111111111111111 *
b1111 /
1;
b0 <
b0 B
b0 R
b0 ^
b0 n
b0 z
b0 +"
b0 7"
13
08
1>
1O
1Z
1k
1v
1("
13"
0=
0N
0Y
0j
0u
0'"
02"
b101 .
b101 J
b101 f
b101 $"
b1010 -
b1010 I
b1010 e
b1010 #"
b101010101010101 '
b101010101010101 )
b1010101010101010 &
b1010101010101010 (
#20
