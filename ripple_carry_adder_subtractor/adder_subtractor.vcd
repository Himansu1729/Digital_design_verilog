$date
	Wed Jul  9 13:09:18 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 4 ! out [3:0] $end
$var wire 1 " carry $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 1 % mode $end
$scope module DUT $end
$var wire 4 & in1 [3:0] $end
$var wire 4 ' in2 [3:0] $end
$var wire 1 % mode $end
$var wire 4 ( out [3:0] $end
$var wire 1 " carry $end
$var wire 3 ) c [2:0] $end
$var wire 4 * b [3:0] $end
$scope module inst1 $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 % cin $end
$var wire 1 - cout $end
$var wire 1 . sum $end
$var wire 3 / t [2:0] $end
$upscope $end
$scope module inst2 $end
$var wire 1 0 a $end
$var wire 1 1 b $end
$var wire 1 2 cin $end
$var wire 1 3 cout $end
$var wire 1 4 sum $end
$var wire 3 5 t [2:0] $end
$upscope $end
$scope module inst3 $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 8 cin $end
$var wire 1 9 cout $end
$var wire 1 : sum $end
$var wire 3 ; t [2:0] $end
$upscope $end
$scope module inst4 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > cin $end
$var wire 1 " cout $end
$var wire 1 ? sum $end
$var wire 3 @ t [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx @
x?
x>
x=
x<
bx ;
x:
x9
x8
x7
x6
bx 5
x4
x3
x2
x1
x0
bx /
x.
x-
x,
x+
bx *
bx )
bx (
bx '
bx &
x%
bx $
bx #
x"
bx !
$end
#5
1"
0?
1>
19
14
0:
12
18
1-
b111 )
13
b10 !
b10 (
0.
b111 5
b10 @
1,
11
17
0=
b100 ;
b111 *
b100 /
0+
10
06
1<
1%
b1000 $
b1000 '
b1010 #
b1010 &
#10
08
0>
03
09
02
0"
0:
b0 ;
b0 )
0-
0,
01
07
04
b0 5
0?
b0 @
b0 *
b0 !
b0 (
0.
b0 /
00
0<
0%
b0 $
b0 '
b0 #
b0 &
#15
14
1:
11
17
b110 *
1.
b1111 !
b1111 (
1?
1+
1<
b110 $
b110 '
b1001 #
b1001 &
#20
1"
0?
b10 @
18
1>
12
13
19
b111 )
1-
1,
01
04
b10 5
1:
b111 ;
b101 *
b101 !
b101 (
1.
b111 /
10
16
1%
b1010 $
b1010 '
b1111 #
b1111 &
#25
1>
19
18
b111 )
13
0"
11
b111 *
04
b100 5
0:
b100 ;
b1001 !
b1001 (
1?
b0 @
00
06
0<
b1000 $
b1000 '
b1 #
b1 &
#30
